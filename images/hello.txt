#include<stdio.h>
#include<string.h>
#include<stdbool.h>
#include<stdlib.h>
#define MAX_JOBS 50
typedef struct Jobs {
    int label;
};

struct Jobs *joblist;

int numJobs = 0;

int *sortedArray;
int **matrix;

void addJobs(int lab) {
    joblist[numJobs].label = lab;
    numJobs = numJobs + 1;
}

void moveRowUp(int row, int length) {
    int col;
    for (col = 0; col < length; col++)
        matrix[row][col] = matrix[row + 1][col];
}

void moveColLeft(int col, int length) {
    int row;
    for (row = 0; row < length; row++)
        matrix[row][col] = matrix[row][col + 1];
}

void deleteJobs(int delVert) {
    int j, row, col;
    if (delVert != numJobs - 1) {
        for (j = delVert; j < numJobs - 1; j++)
            joblist[j] = joblist[j + 1];

        for (row = delVert; row < numJobs - 1; row++)
            moveRowUp(row, numJobs);

        for (col = delVert; col < numJobs - 1; col++)
            moveColLeft(col, numJobs - 1);
    }
    numJobs--;
}

void addOrder(int start, int end) {
    matrix[start][end] = 1;
}


void sort() {
    int j;
    int orig_nVerts = numJobs;

    while (numJobs > 0) {
        int currentJobs = noSuccessors();
        //printf ("%d\n", currentJobs);
        if (currentJobs == -1) {
            printf("ERROR: Graph has cycles");
            return;
        }
        sortedArray[numJobs - 1] = joblist[currentJobs].label;

        deleteJobs(currentJobs);
        //numJobs--;
    }

    for (j = 0; j < orig_nVerts; j++)
    	if(j<orig_nVerts-1)
          printf("%d->", sortedArray[j]);
    	else
    	  printf("%d", sortedArray[j]);

}

int noSuccessors() {
    bool isEdge;
    int row, col;
    for (row = 0; row < numJobs; row++) {
        isEdge = false;
        for (col = 0; col < numJobs; col++) {
            if (matrix[row][col] == 1) {
               isEdge = true;
            }
        }
        if (!isEdge)
            return row;
        }
    
    return -1;
}

int main() {
	int i, k;
	int jobs;
	scanf("%d", &jobs);
	


	matrix = (int **)malloc(jobs * sizeof(int *));

	for (i=0; i<jobs; i++)
	   matrix[i] = (int *)malloc(jobs * sizeof(int));

	 for (i = 0; i < jobs; i++) {
	  for (k = 0; k < jobs; k++) {
	           matrix[i][k] = 0;
	      }
	    }
    joblist= (struct Jobs *)malloc(sizeof(struct Jobs)*jobs);
    sortedArray=(int *)malloc(sizeof(int)*jobs);

    int jobName;
    for(i = 0; i < jobs; i++)
    {  scanf("%d", &jobName);

        addJobs(jobName);
    }

    int orders;
    scanf("%d", &orders);

    int start,end;
    for(i = 0; i < orders; i++)
        {
    	scanf("%d", &start);
        scanf("%d", &end);
        addOrder(start, end);
        }
    sort();
}
